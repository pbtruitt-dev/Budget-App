import React, { useState } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { PlusCircle, MinusCircle, DollarSign, PieChart, Trash2, BarChart2, Wallet, Bookmark } from 'lucide-react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart as RePieChart, Pie, Cell } from 'recharts';

const COLORS = ['#10B981', '#EF4444', '#3B82F6', '#F59E0B', '#8B5CF6', '#EC4899', '#14B8A6', '#F97316', '#6366F1'];

const CATEGORIES = [
  'Rent', 'Utilities', 'Debt', 'Car', 'Insurance', 
  'Grocery', 'Eating Out', 'House', 'Entertainment'
];

const TabButton = ({ active, onClick, children }) => (
  <button
    onClick={onClick}
    className={`px-4 py-2 font-medium rounded-t-lg ${
      active 
        ? 'bg-white text-blue-600 border-t border-x border-gray-200' 
        : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
    }`}
  >
    {children}
  </button>
);

const BudgetApp = () => {
  const [activeTab, setActiveTab] = useState('hub');
  const [income, setIncome] = useState([]);
  const [expenses, setExpenses] = useState([]);
  const [budgets, setBudgets] = useState(
    CATEGORIES.reduce((acc, category) => ({
      ...acc,
      [category]: 0
    }), {})
  );
  const [savings, setSavings] = useState({
    emergency: { current: 0, goal: 10000 },
    investment: { current: 0, goal: 5000 }
  });
  const [newItem, setNewItem] = useState({ 
    type: 'income',
    description: '',
    amount: '',
    category: 'Rent'
  });

  const addItem = () => {
    if (!newItem.description || !newItem.amount) return;
    
    const item = {
      id: Date.now(),
      description: newItem.description,
      amount: parseFloat(newItem.amount),
      category: newItem.category,
      date: new Date().toISOString()
    };

    if (newItem.type === 'income') {
      setIncome([...income, item]);
    } else {
      setExpenses([...expenses, item]);
    }

    setNewItem({ type: 'income', description: '', amount: '', category: 'Rent' });
  };

  const deleteItem = (id, type) => {
    if (type === 'income') {
      setIncome(income.filter(item => item.id !== id));
    } else {
      setExpenses(expenses.filter(item => item.id !== id));
    }
  };

  const updateBudget = (category, amount) => {
    setBudgets(prev => ({
      ...prev,
      [category]: parseFloat(amount) || 0
    }));
  };

  const updateSavings = (type, field, value) => {
    setSavings(prev => ({
      ...prev,
      [type]: {
        ...prev[type],
        [field]: parseFloat(value) || 0
      }
    }));
  };

  const totalIncome = income.reduce((sum, item) => sum + item.amount, 0);
  const totalExpenses = expenses.reduce((sum, item) => sum + item.amount, 0);
  const balance = totalIncome - totalExpenses;

  // Prepare data for charts
  const expensesByCategory = expenses.reduce((acc, curr) => {
    acc[curr.category] = (acc[curr.category] || 0) + curr.amount;
    return acc;
  }, {});

  const budgetComparison = CATEGORIES.map(category => ({
    category,
    budget: budgets[category],
    actual: expensesByCategory[category] || 0
  }));

  const FinancialHub = () => (
    <div className="space-y-6">
      {/* Summary Cards */}
      <div className="grid grid-cols-3 gap-4">
        <Card>
          <CardContent className="pt-6">
            <div className="text-center">
              <PlusCircle className="w-8 h-8 mx-auto mb-2 text-green-500" />
              <div className="text-sm text-gray-600">Total Income</div>
              <div className="text-xl font-bold text-green-500">${totalIncome.toFixed(2)}</div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="text-center">
              <MinusCircle className="w-8 h-8 mx-auto mb-2 text-red-500" />
              <div className="text-sm text-gray-600">Total Expenses</div>
              <div className="text-xl font-bold text-red-500">${totalExpenses.toFixed(2)}</div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="text-center">
              <PieChart className="w-8 h-8 mx-auto mb-2 text-blue-500" />
              <div className="text-sm text-gray-600">Balance</div>
              <div className={`text-xl font-bold ${balance >= 0 ? 'text-green-500' : 'text-red-500'}`}>
                ${balance.toFixed(2)}
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Savings Progress */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Wallet className="w-5 h-5" />
            Savings Progress
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div>
              <div className="flex justify-between mb-1">
                <span className="text-sm font-medium">Emergency Fund</span>
                <span className="text-sm text-gray-600">
                  ${savings.emergency.current} / ${savings.emergency.goal}
                </span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-blue-600 h-2 rounded-full" 
                  style={{ width: `${Math.min(100, (savings.emergency.current / savings.emergency.goal) * 100)}%` }}
                />
              </div>
            </div>
            <div>
              <div className="flex justify-between mb-1">
                <span className="text-sm font-medium">Investment</span>
                <span className="text-sm text-gray-600">
                  ${savings.investment.current} / ${savings.investment.goal}
                </span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-green-600 h-2 rounded-full" 
                  style={{ width: `${Math.min(100, (savings.investment.current / savings.investment.goal) * 100)}%` }}
                />
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Charts */}
      <div className="grid grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <PieChart className="w-5 h-5" />
              Expenses by Category
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <RePieChart>
                  <Pie
                    data={Object.entries(expensesByCategory).map(([category, value]) => ({
                      name: category,
                      value
                    }))}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={({ name, value }) => `${name}: $${value.toFixed(0)}`}
                    outerRadius={80}
                    fill="#8884d8"
                    dataKey="value"
                  >
                    {Object.keys(expensesByCategory).map((_, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Pie>
                  <Tooltip />
                </RePieChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BarChart2 className="w-5 h-5" />
              Budget vs Actual
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={budgetComparison}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="category" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey="budget" fill="#3B82F6" name="Budget" />
                  <Bar dataKey="actual" fill="#EF4444" name="Actual" />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );

  const BudgetPlanner = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Bookmark className="w-5 h-5" />
              Category Budgets
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {CATEGORIES.map(category => (
                <div key={category} className="flex items-center gap-4">
                  <span className="w-32">{category}</span>
                  <input
                    type="number"
                    value={budgets[category]}
                    onChange={(e) => updateBudget(category, e.target.value)}
                    className="p-2 border rounded w-32"
                    placeholder="Budget amount"
                  />
                  <span className="text-sm text-gray-600">
                    Actual: ${(expensesByCategory[category] || 0).toFixed(2)}
                  </span>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Wallet className="w-5 h-5" />
              Savings Goals
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-6">
              <div className="space-y-2">
                <h3 className="font-medium">Emergency Fund</h3>
                <div className="flex gap-4">
                  <div>
                    <label className="text-sm text-gray-600">Current</label>
                    <input
                      type="number"
                      value={savings.emergency.current}
                      onChange={(e) => updateSavings('emergency', 'current', e.target.value)}
                      className="p-2 border rounded w-full"
                    />
                  </div>
                  <div>
                    <label className="text-sm text-gray-600">Goal</label>
                    <input
                      type="number"
                      value={savings.emergency.goal}
                      onChange={(e) => updateSavings('emergency', 'goal', e.target.value)}
                      className="p-2 border rounded w-full"
                    />
                  </div>
                </div>
              </div>

              <div className="space-y-2">
                <h3 className="font-medium">Investment</h3>
                <div className="flex gap-4">
                  <div>
                    <label className="text-sm text-gray-600">Current</label>
                    <input
                      type="number"
                      value={savings.investment.current}
                      onChange={(e) => updateSavings('investment', 'current', e.target.value)}
                      className="p-2 border rounded w-full"
                    />
                  </div>
                  <div>
                    <label className="text-sm text-gray-600">Goal</label>
                    <input
                      type="number"
                      value={savings.investment.goal}
                      onChange={(e) => updateSavings('investment', 'goal', e.target.value)}
                      className="p-2 border rounded w-full"
                    />
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );

  const TrackerInput = () => (
    <div className="space-y-6">
      {/* Input Form */}
      <div className="flex gap-4 mb-6">
        <select 
          className="p-2 border rounded"
          value={newItem.type}
          onChange={(e) => setNewItem({...newItem, type: e.target.value})}
        >
          <option value="income">Income</option>
          <option value="expense">Expense</option>
        </select>
        <input
          type="text"
          placeholder="Description"
          className="p-2 border rounded flex-grow"
          value={newItem.description}
          onChange={(e) => setNewItem({...newItem, description: e.target.value})}
        />
        <input
          type="number"
          placeholder="Amount"
          className="p-2 border rounded w-32"
          value={newItem.amount}
          onChange={(e) => setNewItem({...newItem, amount: e.target.value})}
        />
        {newItem.type === 'expense' && (
          <select
            className="p-2 border rounded"
            value={newItem.category}
            onChange={(e) => setNewItem({...newItem, category: e.target.value})}
          >
            {CATEGORIES.map(category => (
              <option key={category} value={category}>{category}</option>
            ))}
          </select>
        )}
        <button
          onClick={addItem}
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Add
        </button>
      </div>

      {/* Lists */}
      <div className="grid grid-cols-2 gap-6">
        {/* Income List */}
        <div>
          <h3 className="text-lg font-semibold mb-3 text-green-600">Income</h3>
          <div className="space-y-2">
            {income.map(item => (
              <div key={item.id} className="flex items-center justify-between p-2 bg-green-50 rounded">
                <span>{item.description}</span>
                <div className="flex items-center gap-3">
                  <span className="text-green-600">${item.amount.toFixed(2)}</span>
                  <button 
                    onClick={() => deleteItem(item.id, 'income')}
                    className="text-red-500 hover:text-red-700"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Expenses List */}
        <div>
          <h3 className="text-lg font-semibold mb-3 text-red-600">Expenses</h3>
          <div className="space-y-2">
            {expenses.map(item => (
              <div key={item.id} className="flex items-center justify-between p-2 bg-red-50 rounded">
                <div>
                  <span>{item.description}</span>
                  <span className="ml-2 text-sm text-gray-500">({item.category})</span>
                </div>
                <div className="flex items-center gap-3">
                  <span className="text-red-600">${item.amount.toFixed(2)}</span>
                  <button 
                    onClick={() => deleteItem(item.id, 'expense')}
                    className="text-red-500 hover:text-red-700"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="max-w-6xl mx-auto p-4">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 mb-4">
            <DollarSign className="w-6 h-6" />
            Truitt Financial Hub
          </CardTitle>
          <div className="flex gap-2 border-b border-gray-200">
            <TabButton 
              active={activeTab === 'hub'} 
              onClick={() => setActiveTab('hub')}
            >
              Financial Hub
            </TabButton>
            <TabButton 
              active={activeTab === 'budget'} 
              onClick={() => setActiveTab('budget')}
            >
              Budget Planning
            </TabButton>
            <TabButton 
              active={activeTab === 'tracker'} 
              onClick={() => setActiveTab('tracker')}
            >
              Tracker Input
            </TabButton>
          </div>
        </CardHeader>
        <CardContent>
          {activeTab === 'hub' ? <FinancialHub /> : 
           activeTab === 'budget' ? <BudgetPlanner /> : 
           <TrackerInput />}
        </CardContent>
      </Card>
    </div>
  );
};

export default BudgetApp;